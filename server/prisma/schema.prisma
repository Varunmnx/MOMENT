// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}



model Products{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  description String
  price Float
  rating Int @default(0)
  images Images[]
  category String
  user Creator?
  stock Int @default(1)
  reviews Reviews[] // line 40
  createdat DateTime @default(now())
  cart   ShoppingCart[] 
}

//related with products
type Images{
  public_id String @default("")
  url String  @default("")
}
type Creator{
  type String
  ref String @default("user")
}



// reviews for each product ( one to many rel ) and each review with one user who can post many reviews ( many to one )
model Reviews{
   id String @id @default(auto()) @map("_id") @db.ObjectId
   name String @default("")
   rating Int @default(0)
   comment String
   productId String @db.ObjectId  // related to one product
   product Products @relation(fields: [productId],references: [id])
   authorId String @db.ObjectId   // related to one user
   user User @relation(fields: [authorId],references: [id])
}


model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  avatar              UserAvatar?
  email               String @unique
  name                String
  password            String
  resetPasswordExpire String @default("")
  resetPasswordToken  String @default("") 
  role                String @default("user")
  shoppingCart        ShoppingCart[]  // one to  many rel
  comments            Reviews[] //one to many rel
  isEmailVerified     Boolean @default(false)
  otp                 String  @default("")
}

// one user can have many cart items ie one user with many items related with shopping cart
model ShoppingCart{
    id                  String     @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    itemId              String     @db.ObjectId @unique
    product             Products   @relation(fields: [itemId],references: [id])       //products id should be used here to identify specific product
    quantity            Int        @default(0)       // increment if product with this itemid exist
    price               Float              // increment if product with this itemid exist
    description         String
    rating              Int 
    cartId              String     @db.ObjectId  @unique
    image               Images[]   //reused from products
    user                User       @relation(fields: [cartId],references: [id]) 
}





//related with User model 
type UserAvatar {
  public_id String @default("")
  url       String @default("https://avatars.dicebear.com/api/croodles-neutral/sad.svg")
}

// for taking user order shippment address and calculating the amount to be paid
model OrderDetails{
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber         Int
  country             String
  state               String
  pincode             Int
  areaDetails         String
  orderId             String     @db.ObjectId   @unique
  orderItems          OrderedItems[]
  status              String @default("processing")
  total               Float  @default(0.0)
  paymentMode         String  @default("online")
  paymentStatus       String  @default("pending")
}


type  OrderedItems{
  name String
  itemId String
  price   Int
  quantity  Int
}