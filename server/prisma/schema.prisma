// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}



model Products{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  description String
  price Float
  rating Int @default(0)
  images Images[]
  category String
  user Creator?
  stock Int @default(1)
  numberofreviews Reviews[]
  createdat DateTime @default(now())
  cart   ShoppingCart?
}

//related with products
type Images{
  public_id String @default("")
  url String  @default("")
}
type Creator{
  type String
  ref String @default("user")
}

type Reviews{
   name String @default("")
   rating Int @default(0)
   comment String
}


model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  avatar              UserAvatar?
  email               String @unique
  name                String
  password            String
  resetPasswordExpire String @default("")
  resetPasswordToken  String @default("") 
  role                String @default("user")
  shoppingCart       ShoppingCart[]
}

// one user can have many cart items ie one user with many items related with shopping cart
model ShoppingCart{
    id                  String     @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    itemId              String     @db.ObjectId @unique
    product             Products      @relation(fields: [itemId],references: [id])       //products id should be used here to identify specific product
    quantity            Int        @default(0)       // increment if product with this itemid exist
    price               Float              // increment if product with this itemid exist
    description         String
    rating              Int 
    cartId              String           @db.ObjectId
    image               Images[]  //reused from products
    user                User @relation(fields: [cartId],references: [id]) 
}





//related with User model 
type UserAvatar {
  public_id String @default("")
  url       String @default("https://avatars.dicebear.com/api/croodles-neutral/sad.svg")
}

//test
model Post {
    id    String     @id @default(auto()) @map("_id") @db.ObjectId
    name String
    comments Comments[]
}

model Comments{
  id    String     @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  commentId String @db.ObjectId
  post Post @relation(fields: [commentId] , references: [id])
}